- stat: path=/usr/local/ophidia/oph-cluster/oph-analytics-framework/etc/oph_script_configuration
  register: installation_completed

- block:
  ...
  ...
  ...

  ########################################
  # GRAFANA-INFLUXDB
  ########################################

  - name: Wait for /data/.utils file
    wait_for: path=/data/.utils

  - name: Read influxdb token
    shell: sed -n '2p' /data/.utils
    register: admin_token

  - name: Read grafana pwd
    shell: sed -n '3p' /data/.utils
    register: grafana_pwd

  - name: Read dashboard uid
    shell: sed -n '4p' /data/.utils
    register: dashboard_uid

  - name: Test if dashboard has already imported in Grafana
    uri:
      url: "http://{{ private_server_ip }}:3000/api/dashboards/uid/{{ dashboard_uid.stdout }}"
      method: GET
      return_content: yes
      url_username: "admin"
      url_password: "{{ grafana_pwd.stdout }}"
      force_basic_auth: "yes"
      headers:
        Content-Type: "application/json"
    ignore_errors: true
    register: dashboard_content
    until: dashboard_content.content != ""
    retries: 15
    delay: 10

  - name: Install bc
    yum: name=bc state=latest

  - name: Create monitoring folder
    file: path=/home/{{ oph_user }}/monitoring state=directory mode=0755
    become: yes
    become_user: "{{ oph_user }}"

  - name: Check template infrastructure_monitor_user.sh
    stat: path=/home/{{ oph_user }}/monitoring/infrastructure_monitor_user.sh
    register: infrastructure_script

  - name: Copy template of infrastructure_monitor_user
    ansible.builtin.template:
      src: infrastructure_monitor_user.sh.j2
      dest: /home/{{ oph_user }}/monitoring/infrastructure_monitor_user.sh
      mode: 0755
    when: not infrastructure_script.stat.exists
    become: yes
    become_user: "{{ oph_user }}"

  - name: Check script infrastructure_monitor_user.sh
    shell: ps -ef | grep infrastructure_monitor_user.sh | grep -v grep
    register: script_infrastructure_running
    ignore_errors: true

  - name: Run infrastructure_monitor_user.sh
    shell: nohup /home/{{ oph_user }}/monitoring/infrastructure_monitor_user.sh -t {{ ansible_hostname }} -f /home/{{ oph_user }}/monitoring -u {{ oph_user }} &
    when: script_infrastructure_running.stdout == ""
    become: yes
    become_user: "{{ oph_user }}"

  when: force_reinstall or not installation_completed.stat.exists